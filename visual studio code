import cv2
import numpy as np
from tensorflow.keras.models import load_model
import time
from PIL import Image, ImageDraw, ImageFont
from gtts import gTTS
import playsound
import os
import serial  # Th∆∞ vi·ªán k·∫øt n·ªëi Arduino
from datetime import datetime

# T·∫Øt c·∫£nh b√°o oneDNN
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'

# K·∫øt n·ªëi Arduino
try:
    arduino = serial.Serial('COM4', 9600, timeout=2)
    time.sleep(2)
    print("‚úÖ ƒê√£ k·∫øt n·ªëi Arduino th√†nh c√¥ng!")
except Exception as e:
    print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Arduino: {e}")
    arduino = None

# Load m√¥ h√¨nh
try:
    model = load_model('waste_classifier_best.h5')
    print("‚úÖ ƒê√£ load m√¥ h√¨nh th√†nh c√¥ng!")
except Exception as e:
    print(f"‚ùå L·ªói khi load m√¥ h√¨nh: {e}")
    exit()

# Danh s√°ch l·ªõp
classes = ['R√°c t√°i ch·∫ø', 'R√°c th·∫£i c√≤n l·∫°i', 'Th·ª±c ph·∫©m th·ª´a']

# H√†m ƒë·ªçc URL camera t·ª´ file config.txt
def get_camera_url():
    try:
        with open("config.txt", "r") as f:
            url = f.read().strip()
            print(f"üì° ƒê√£ ƒë·ªçc URL camera t·ª´ config.txt: {url}")
            return url
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c config.txt, d√πng webcam m·∫∑c ƒë·ªãnh. L·ªói: {e}")
        return '0'  # webcam m·∫∑c ƒë·ªãnh

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
def preprocess_frame(frame):
    try:
        img = cv2.convertScaleAbs(frame, alpha=1.2, beta=30)
        img = cv2.GaussianBlur(img, (5, 5), 0)
        img = cv2.resize(img, (224, 224))
        img = img.astype('float32') / 255.0
        return np.expand_dims(img, axis=0)
    except Exception as e:
        print(f"L·ªói ti·ªÅn x·ª≠ l√Ω: {e}")
        return None

# H√†m ph√°t √¢m thanh
def speak_result(text):
    try:
        filename = f"audio_{datetime.now().strftime('%H%M%S')}.mp3"
        tts = gTTS(text=text, lang='vi')
        tts.save(filename)
        playsound.playsound(filename)
        os.remove(filename)
    except Exception as e:
        print(f"‚ùå L·ªói ph√°t √¢m: {e}")

# H√†m v·∫Ω k·∫øt qu·∫£
def create_result_window(text):
    img = np.ones((300, 500, 3), dtype=np.uint8) * 255
    img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(img_pil)
    try:
        font = ImageFont.truetype("arial.ttf", 30)
    except:
        font = ImageFont.load_default()
    draw.text((10, 120), text, font=font, fill=(0, 0, 0))
    return cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

# H√†m hi·ªÉn th·ªã giao di·ªán ƒë·ª£i Enter
def show_waiting_screen():
    wait_img = np.ones((300, 500, 3), dtype=np.uint8) * 255
    img_pil = Image.fromarray(cv2.cvtColor(wait_img, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(img_pil)
    try:
        font = ImageFont.truetype("arial.ttf", 24)
    except:
        font = ImageFont.load_default()
    draw.text((50, 100), "Nh·∫•n ENTER ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√©t", font=font, fill=(0, 0, 0))
    draw.text((50, 150), "Nh·∫•n Q ƒë·ªÉ tho√°t", font=font, fill=(0, 0, 0))
    wait_screen = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
    cv2.imshow("Nh·∫≠n di·ªán r√°c", wait_screen)

# H√†m qu√©t v√† nh·∫≠n di·ªán
def scan_and_detect():
    camera_url = get_camera_url()
    cap = cv2.VideoCapture(camera_url)
    
    if not cap.isOpened():
        print("‚ö†Ô∏è Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c camera IP, chuy·ªÉn sang webcam m·∫∑c ƒë·ªãnh...")
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            print("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c camera n√†o c·∫£.")
            return False

    confidence_threshold = 0.5
    max_duration = 5
    start_time = time.time()
    best_prediction = "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh"
    best_confidence = 0.0

    while (time.time() - start_time) < max_duration:
        ret, frame = cap.read()
        if not ret:
            print("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame.")
            continue

        processed = preprocess_frame(frame)
        if processed is None:
            continue

        try:
            predictions = model.predict(processed, verbose=0)
            class_index = np.argmax(predictions[0])
            confidence = np.max(predictions[0])
            label = classes[class_index]
            print(f"D·ª± ƒëo√°n: {label} - {confidence:.2f}")

            if confidence > best_confidence:
                best_confidence = confidence
                best_prediction = label

            remaining = max_duration - (time.time() - start_time)
            cv2.putText(frame, f"CHECK ({remaining:.1f}s)", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.imshow("Camera", frame)

            if cv2.waitKey(1) & 0xFF == ord('q'):
                cap.release()
                cv2.destroyAllWindows()
                return False

        except Exception as e:
            print(f"L·ªói d·ª± ƒëo√°n: {e}")

    cap.release()
    cv2.destroyWindow("Camera")

    if best_confidence >= confidence_threshold:
        result_label = f"KET QUA: {best_prediction} ({best_confidence*100:.1f}%)"
    else:
        result_label = "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·∫≠t th·ªÉ"

    print(result_label)

    try:
        cv2.imshow("K·∫øt qu·∫£", create_result_window(result_label))
        cv2.waitKey(1000)
    except Exception as e:
        print("‚ö†Ô∏è L·ªói hi·ªÉn th·ªã k·∫øt qu·∫£:", e)

    speak_result(best_prediction)

    if arduino:
        try:
            if "R√°c t√°i ch·∫ø" in best_prediction:
                arduino.write(b'1')
                print("üì§ G·ª≠i m·ªü th√πng r√°c 1")
            elif "R√°c th·∫£i c√≤n l·∫°i" in best_prediction:
                arduino.write(b'2')
                print("üì§ G·ª≠i m·ªü th√πng r√°c 2")
            elif "Th·ª±c ph·∫©m th·ª´a" in best_prediction:
                arduino.write(b'3')
                print("üì§ G·ª≠i m·ªü th√πng r√°c 3")
            else:
                print("üì§ Kh√¥ng g·ª≠i t√≠n hi·ªáu v√¨ kh√¥ng x√°c ƒë·ªãnh v·∫≠t th·ªÉ.")
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i d·ªØ li·ªáu Arduino: {e}")

    time.sleep(7)
    speak_result("C·∫£m ∆°n ƒë√£ cho t√¥i r√°c")
    cv2.destroyWindow("K·∫øt qu·∫£")

    return True

# V√≤ng l·∫∑p ch√≠nh
def main():
    print("H·ªá th·ªëng nh·∫≠n di·ªán r√°c ƒë√£ s·∫µn s√†ng!")
    running = True

    while running:
        show_waiting_screen()
        key = cv2.waitKey(0)

        if key == 13:
            cv2.destroyWindow("Nh·∫≠n di·ªán r√°c")
            if scan_and_detect():
                print("ƒêang ch·ªù 5 gi√¢y tr∆∞·ªõc khi s·∫µn s√†ng cho l·∫ßn qu√©t ti·∫øp theo...")
                time.sleep(5)
            else:
                running = False
        elif key == ord('q'):
            running = False

    cv2.destroyAllWindows()
    print("ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh!")

# Ch·∫°y
if __name__ == "__main__":
    main()
